/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGymEquipmentGymIdEquipmentIdDelete } from '../fn/gym-equipment/api-gym-equipment-gym-id-equipment-id-delete';
import { ApiGymEquipmentGymIdEquipmentIdDelete$Params } from '../fn/gym-equipment/api-gym-equipment-gym-id-equipment-id-delete';
import { apiGymEquipmentGymIdPost } from '../fn/gym-equipment/api-gym-equipment-gym-id-post';
import { ApiGymEquipmentGymIdPost$Params } from '../fn/gym-equipment/api-gym-equipment-gym-id-post';

@Injectable({ providedIn: 'root' })
export class GymEquipmentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGymEquipmentGymIdPost()` */
  static readonly ApiGymEquipmentGymIdPostPath = '/api/GymEquipment/{gymId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGymEquipmentGymIdPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiGymEquipmentGymIdPost$Response(params: ApiGymEquipmentGymIdPost$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return apiGymEquipmentGymIdPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGymEquipmentGymIdPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiGymEquipmentGymIdPost(params: ApiGymEquipmentGymIdPost$Params, context?: HttpContext): Observable<boolean> {
    return this.apiGymEquipmentGymIdPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `apiGymEquipmentGymIdEquipmentIdDelete()` */
  static readonly ApiGymEquipmentGymIdEquipmentIdDeletePath = '/api/GymEquipment/{gymId}/{equipmentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGymEquipmentGymIdEquipmentIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGymEquipmentGymIdEquipmentIdDelete$Response(params: ApiGymEquipmentGymIdEquipmentIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return apiGymEquipmentGymIdEquipmentIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGymEquipmentGymIdEquipmentIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGymEquipmentGymIdEquipmentIdDelete(params: ApiGymEquipmentGymIdEquipmentIdDelete$Params, context?: HttpContext): Observable<boolean> {
    return this.apiGymEquipmentGymIdEquipmentIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
