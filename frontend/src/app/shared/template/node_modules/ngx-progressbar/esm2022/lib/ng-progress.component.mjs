import { Component, Input, Output, ViewChild, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { tap } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./ng-progress.service";
import * as i2 from "@angular/common";
class NgProgressComponent {
    get isStarted() {
        return this.progressRef?.isStarted;
    }
    constructor(_ngProgress) {
        this._ngProgress = _ngProgress;
        /** Creates a new instance if id is not already exists */
        this.id = 'root';
        /** Initializes inputs from the global config */
        this.min = this._ngProgress.config.min;
        this.max = this._ngProgress.config.max;
        this.ease = this._ngProgress.config.ease;
        this.color = this._ngProgress.config.color;
        this.speed = this._ngProgress.config.speed;
        this.thick = this._ngProgress.config.thick;
        this.fixed = this._ngProgress.config.fixed;
        this.meteor = this._ngProgress.config.meteor;
        this.spinner = this._ngProgress.config.spinner;
        this.trickleSpeed = this._ngProgress.config.trickleSpeed;
        this.debounceTime = this._ngProgress.config.debounceTime;
        this.trickleFunc = this._ngProgress.config.trickleFunc;
        this.spinnerPosition = this._ngProgress.config.spinnerPosition;
        this.direction = this._ngProgress.config.direction;
        this.started = new EventEmitter();
        this.completed = new EventEmitter();
    }
    ngOnChanges() {
        // Update progress bar config when inputs change
        this.progressRef?.setConfig({
            max: (this.max > 0 && this.max <= 100) ? this.max : 100,
            min: (this.min < 100 && this.min >= 0) ? this.min : 0,
            speed: this.speed,
            trickleSpeed: this.trickleSpeed,
            trickleFunc: this.trickleFunc,
            debounceTime: this.debounceTime
        });
    }
    ngOnInit() {
        // Get progress bar service instance
        this.progressRef = this._ngProgress.ref(this.id, {
            max: this.max,
            min: this.min,
            speed: this.speed,
            trickleSpeed: this.trickleSpeed,
            debounceTime: this.debounceTime
        });
        // Subscribe to progress state
        const progress = this.progressElement.nativeElement;
        const progressWrapper = this.progressWrapperElement.nativeElement;
        this._state = this.progressRef.state.pipe(tap((state) => {
            progress.style.transform = `translate3d(${state.value}%,0,0)`;
            if (state.active) {
                progress.style.transition = `all ${this.speed}ms ${this.ease}`;
                progressWrapper.setAttribute('active', 'true');
            }
            else {
                progress.style.transition = 'none';
                progressWrapper.setAttribute('active', 'false');
            }
        })).subscribe();
        // Subscribes to started and completed events on demand
        if (this.started.observed) {
            this._started = this.progressRef.started.subscribe(() => this.started.emit());
        }
        if (this.completed.observed) {
            this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());
        }
    }
    ngOnDestroy() {
        this._state?.unsubscribe();
        this._started?.unsubscribe();
        this._completed?.unsubscribe();
        this.progressRef?.destroy();
    }
    start() {
        this.progressRef.start();
    }
    complete() {
        this.progressRef.complete();
    }
    inc(n) {
        this.progressRef.inc(n);
    }
    set(n) {
        this.progressRef.set(n);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: NgProgressComponent, deps: [{ token: i1.NgProgress }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: NgProgressComponent, isStandalone: true, selector: "ng-progress", inputs: { id: "id", min: "min", max: "max", ease: "ease", color: "color", speed: "speed", thick: "thick", fixed: "fixed", meteor: "meteor", spinner: "spinner", trickleSpeed: "trickleSpeed", debounceTime: "debounceTime", trickleFunc: "trickleFunc", spinnerPosition: "spinnerPosition", direction: "direction" }, outputs: { started: "started", completed: "completed" }, host: { attributes: { "role": "progressbar" }, properties: { "attr.spinnerPosition": "spinnerPosition", "attr.direction": "direction", "attr.thick": "thick", "attr.fixed": "fixed" } }, viewQueries: [{ propertyName: "progressElement", first: true, predicate: ["progressbar"], descendants: true, static: true }, { propertyName: "progressWrapperElement", first: true, predicate: ["progressbarWrapper"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <div #progressbarWrapper
         class="ng-progress-bar"
         [style.transition]="'opacity ' + speed + 'ms ' + ease">
      <div class="ng-bar-placeholder">
        <div #progressbar
             class="ng-bar"
             [style.backgroundColor]="color">
          <div *ngIf="meteor" class="ng-meteor" [style.boxShadow]="'0 0 10px ' + color + ', 0 0 5px ' + color"></div>
        </div>
      </div>
      <div *ngIf="spinner" class="ng-spinner">
        <div class="ng-spinner-icon"
             [style.borderTopColor]="color"
             [style.borderLeftColor]="color"></div>
      </div>
    </div>
  `, isInline: true, styles: [":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\"ltr+\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\"ltr+\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\"ltr+\"] .ng-bar,:host[direction=\"rtl+\"] .ng-bar{margin-left:-100%}:host[direction=\"ltr+\"] .ng-meteor,:host[direction=\"rtl+\"] .ng-meteor{right:0}:host[direction=\"ltr+\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\"ltr+\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\"rtl+\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\"rtl+\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\"rtl+\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\"rtl+\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\"rtl+\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\"rtl+\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { NgProgressComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: NgProgressComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-progress', host: {
                        'role': 'progressbar',
                        '[attr.spinnerPosition]': 'spinnerPosition',
                        '[attr.direction]': 'direction',
                        '[attr.thick]': 'thick',
                        '[attr.fixed]': 'fixed'
                    }, template: `
    <div #progressbarWrapper
         class="ng-progress-bar"
         [style.transition]="'opacity ' + speed + 'ms ' + ease">
      <div class="ng-bar-placeholder">
        <div #progressbar
             class="ng-bar"
             [style.backgroundColor]="color">
          <div *ngIf="meteor" class="ng-meteor" [style.boxShadow]="'0 0 10px ' + color + ', 0 0 5px ' + color"></div>
        </div>
      </div>
      <div *ngIf="spinner" class="ng-spinner">
        <div class="ng-spinner-icon"
             [style.borderTopColor]="color"
             [style.borderLeftColor]="color"></div>
      </div>
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [CommonModule], styles: [":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\"ltr+\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\"ltr+\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\"ltr+\"] .ng-bar,:host[direction=\"rtl+\"] .ng-bar{margin-left:-100%}:host[direction=\"ltr+\"] .ng-meteor,:host[direction=\"rtl+\"] .ng-meteor{right:0}:host[direction=\"ltr+\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\"ltr+\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\"rtl+\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\"rtl+\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\"rtl+\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\"rtl+\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\"rtl+\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\"rtl+\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NgProgress }]; }, propDecorators: { id: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], ease: [{
                type: Input
            }], color: [{
                type: Input
            }], speed: [{
                type: Input
            }], thick: [{
                type: Input
            }], fixed: [{
                type: Input
            }], meteor: [{
                type: Input
            }], spinner: [{
                type: Input
            }], trickleSpeed: [{
                type: Input
            }], debounceTime: [{
                type: Input
            }], trickleFunc: [{
                type: Input
            }], spinnerPosition: [{
                type: Input
            }], direction: [{
                type: Input
            }], started: [{
                type: Output
            }], completed: [{
                type: Output
            }], progressElement: [{
                type: ViewChild,
                args: ['progressbar', { static: true }]
            }], progressWrapperElement: [{
                type: ViewChild,
                args: ['progressbarWrapper', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,