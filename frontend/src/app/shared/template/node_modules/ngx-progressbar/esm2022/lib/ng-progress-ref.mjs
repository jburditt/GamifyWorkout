import { Subject, BehaviorSubject, Subscription, of, tap, delay, filter, timer, debounce, switchMap, finalize, takeUntil, combineLatest, EMPTY } from 'rxjs';
export class NgProgressRef {
    // Get current progress state
    get snapshot() {
        return this._state.value;
    }
    // Check if progress has started
    get isStarted() {
        return this.snapshot.active;
    }
    constructor(customConfig, _onDestroyCallback) {
        this._onDestroyCallback = _onDestroyCallback;
        // Progress start source event (used to cancel finalizing delays)
        this._started = new Subject();
        // Progress start event: stream that emits only when it hasn't already started
        this.started = this._started.pipe(filter(() => !this.isStarted));
        // Progress ended source event
        this._completed = new Subject();
        // Progress start event: stream that emits only when it has already started
        this.completed = this._completed.pipe(filter(() => this.isStarted));
        // Stream that increments and updates the progress state
        this._trickling = new Subject();
        // Stream that combines "_trickling" and "config" streams
        this._worker = Subscription.EMPTY;
        this._state = new BehaviorSubject({ active: false, value: 0 });
        this._config = new BehaviorSubject(customConfig);
        this.state = this._state.asObservable();
        this.config = this._config.asObservable();
        this._worker = combineLatest([this._trickling, this._config]).pipe(debounce(([start, config]) => timer(start ? config.debounceTime : 0)), switchMap(([start, config]) => start ? this.onTrickling(config) : this.onComplete(config))).subscribe();
    }
    /**
     * Start the progress
     */
    start() {
        this._started.next();
        this._trickling.next(true);
    }
    /**
     * Complete the progress
     */
    complete() {
        this._trickling.next(false);
    }
    /**
     * Increment the progress
     */
    inc(amount) {
        const n = this.snapshot.value;
        if (!this.isStarted) {
            this.start();
        }
        else {
            if (typeof amount !== 'number') {
                amount = this._config.value.trickleFunc(n);
            }
            this.set(n + amount);
        }
    }
    /**
     * Set the progress
     */
    set(n) {
        this.setState({ value: this.clamp(n), active: true });
    }
    /**
     * Set config
     */
    setConfig(config) {
        this._config.next({ ...this._config.value, ...config });
    }
    /**
     * Destroy progress reference
     */
    destroy() {
        this._worker.unsubscribe();
        this._trickling.complete();
        this._state.complete();
        this._config.complete();
        this._started.complete();
        this._completed.complete();
        this._onDestroyCallback();
    }
    /**
     * Set progress state
     */
    setState(state) {
        this._state.next({ ...this.snapshot, ...state });
    }
    /**
     * Clamps a value to be between min and max
     */
    clamp(n) {
        return Math.max(this._config.value.min, Math.min(this._config.value.max, n));
    }
    /**
     * Keeps incrementing the progress
     */
    onTrickling(config) {
        if (!this.isStarted) {
            this.set(this._config.value.min);
        }
        return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));
    }
    /**
     * Completes then resets the progress
     */
    onComplete(config) {
        this._completed.next();
        return !this.isStarted ? EMPTY : of({}).pipe(
        // Complete the progress
        tap(() => this.setState({ value: 100 })), 
        // Deactivate the progress after a tiny delay
        delay(config.speed * 1.7), tap(() => this.setState({ active: false })), 
        // Use a tiny delay before resetting
        delay(config.speed), 
        // Force the progress to reset even it got cancelled
        finalize(() => this.setState({ value: 0 })), 
        // Cancel any of the finalizing delays if the progress has started again
        takeUntil(this._started));
    }
}
//# sourceMappingURL=data:application/json;base64,