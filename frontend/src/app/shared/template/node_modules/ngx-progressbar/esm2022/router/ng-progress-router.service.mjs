import { Injectable, Optional, Inject } from '@angular/core';
import { NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';
import { of, tap, delay, switchMap, filter } from 'rxjs';
import { NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';
import * as i0 from "@angular/core";
import * as i1 from "ngx-progressbar";
import * as i2 from "@angular/router";
/**
 * Check if a router event type exists in an array of router event types
 */
function eventExists(routerEvent, events) {
    let res = false;
    events.map((event) => res = res || routerEvent instanceof event);
    return res;
}
class NgProgressRouter {
    constructor(progress, router, config) {
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? { ...this._config, ...config } : this._config;
        const progressRef = progress.ref(this._config.id);
        const startProgress = of({}).pipe(tap(() => progressRef.start()));
        const completeProgress = of({}).pipe(delay(this._config.delay), tap(() => progressRef.complete()));
        const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];
        router.events.pipe(filter((event) => eventExists(event, filterEvents)), switchMap((event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)).subscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: NgProgressRouter, deps: [{ token: i1.NgProgress }, { token: i2.Router }, { token: NG_PROGRESS_ROUTER_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: NgProgressRouter, providedIn: 'root' }); }
}
export { NgProgressRouter };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: NgProgressRouter, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.NgProgress }, { type: i2.Router }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NG_PROGRESS_ROUTER_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHJvZ3Jlc3NiYXIvcm91dGVyL3NyYy9uZy1wcm9ncmVzcy1yb3V0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFVLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFzQixNQUFNLGlCQUFpQixDQUFDO0FBQ2hJLE9BQU8sRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXpELE9BQU8sRUFBZ0QseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7OztBQUV6SDs7R0FFRztBQUNILFNBQVMsV0FBVyxDQUFDLFdBQWtCLEVBQUUsTUFBMkI7SUFDbEUsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBQ2hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLFdBQVcsWUFBWSxLQUFLLENBQUMsQ0FBQztJQUNwRixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUdhLGdCQUFnQjtJQVEzQixZQUFZLFFBQW9CLEVBQUUsTUFBYyxFQUFpRCxNQUE4QjtRQVA5RyxZQUFPLEdBQXlCO1lBQy9DLEVBQUUsRUFBRSxNQUFNO1lBQ1YsS0FBSyxFQUFFLENBQUM7WUFDUixXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFDOUIsY0FBYyxFQUFFLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQztTQUNuRSxDQUFDO1FBR0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDcEUsTUFBTSxXQUFXLEdBQWtCLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVqRSxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMvQixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQy9CLENBQUM7UUFFRixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN6QixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ2xDLENBQUM7UUFFRixNQUFNLFlBQVksR0FBd0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV4RyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQzFELFNBQVMsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQzdHLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDaEIsQ0FBQzs4R0EzQlUsZ0JBQWdCLGtFQVEyQyx5QkFBeUI7a0hBUnBGLGdCQUFnQixjQUZmLE1BQU07O1NBRVAsZ0JBQWdCOzJGQUFoQixnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFTb0QsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvblN0YXJ0LCBOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRXJyb3IsIFJvdXRlckV2ZW50LCBFdmVudCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IG9mLCB0YXAsIGRlbGF5LCBzd2l0Y2hNYXAsIGZpbHRlciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzLCBOZ1Byb2dyZXNzUmVmIH0gZnJvbSAnbmd4LXByb2dyZXNzYmFyJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc1JvdXRlckNvbmZpZywgUHJvZ3Jlc3NSb3V0ZXJDb25maWcsIE5HX1BST0dSRVNTX1JPVVRFUl9DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLXJvdXRlci5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgcm91dGVyIGV2ZW50IHR5cGUgZXhpc3RzIGluIGFuIGFycmF5IG9mIHJvdXRlciBldmVudCB0eXBlc1xyXG4gKi9cclxuZnVuY3Rpb24gZXZlbnRFeGlzdHMocm91dGVyRXZlbnQ6IEV2ZW50LCBldmVudHM6IFR5cGU8Um91dGVyRXZlbnQ+W10pOiBib29sZWFuIHtcclxuICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgZXZlbnRzLm1hcCgoZXZlbnQ6IFR5cGU8Um91dGVyRXZlbnQ+KSA9PiByZXMgPSByZXMgfHwgcm91dGVyRXZlbnQgaW5zdGFuY2VvZiBldmVudCk7XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdQcm9ncmVzc1JvdXRlciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBQcm9ncmVzc1JvdXRlckNvbmZpZyA9IHtcclxuICAgIGlkOiAncm9vdCcsXHJcbiAgICBkZWxheTogMCxcclxuICAgIHN0YXJ0RXZlbnRzOiBbTmF2aWdhdGlvblN0YXJ0XSxcclxuICAgIGNvbXBsZXRlRXZlbnRzOiBbTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVycm9yXVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb2dyZXNzOiBOZ1Byb2dyZXNzLCByb3V0ZXI6IFJvdXRlciwgQE9wdGlvbmFsKCkgQEluamVjdChOR19QUk9HUkVTU19ST1VURVJfQ09ORklHKSBjb25maWc6IE5nUHJvZ3Jlc3NSb3V0ZXJDb25maWcpIHtcclxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZyA/IHsuLi50aGlzLl9jb25maWcsIC4uLmNvbmZpZ30gOiB0aGlzLl9jb25maWc7XHJcbiAgICBjb25zdCBwcm9ncmVzc1JlZjogTmdQcm9ncmVzc1JlZiA9IHByb2dyZXNzLnJlZih0aGlzLl9jb25maWcuaWQpO1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0UHJvZ3Jlc3MgPSBvZih7fSkucGlwZShcclxuICAgICAgdGFwKCgpID0+IHByb2dyZXNzUmVmLnN0YXJ0KCkpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGNvbXBsZXRlUHJvZ3Jlc3MgPSBvZih7fSkucGlwZShcclxuICAgICAgZGVsYXkodGhpcy5fY29uZmlnLmRlbGF5KSxcclxuICAgICAgdGFwKCgpID0+IHByb2dyZXNzUmVmLmNvbXBsZXRlKCkpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGZpbHRlckV2ZW50czogVHlwZTxSb3V0ZXJFdmVudD5bXSA9IFsuLi50aGlzLl9jb25maWcuc3RhcnRFdmVudHMsIC4uLnRoaXMuX2NvbmZpZy5jb21wbGV0ZUV2ZW50c107XHJcblxyXG4gICAgcm91dGVyLmV2ZW50cy5waXBlKFxyXG4gICAgICBmaWx0ZXIoKGV2ZW50OiBFdmVudCkgPT4gZXZlbnRFeGlzdHMoZXZlbnQsIGZpbHRlckV2ZW50cykpLFxyXG4gICAgICBzd2l0Y2hNYXAoKGV2ZW50OiBFdmVudCkgPT4gZXZlbnRFeGlzdHMoZXZlbnQsIHRoaXMuX2NvbmZpZy5zdGFydEV2ZW50cykgPyBzdGFydFByb2dyZXNzIDogY29tcGxldGVQcm9ncmVzcylcclxuICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==